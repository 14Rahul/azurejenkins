//Cretae 1 string perameter artifactversion

pipeline {
  agent any
  stages {
    stage('Download Artifact') {
      steps {
        script{
            
            echo params.artifactversion
                cleanWs()
                
                sh '''
                   curl -L -X GET "http://20.204.151.243:8081/service/rest/v1/search/assets/download?repository=devopsnexusstage&group=org.springframework&version=${artifactversion}&sort=version" --output java-${artifactversion}.jar
                '''
          
        }
      }
    }


  stage('Archive Artifact') {
      steps {
            script{
               archiveArtifacts artifacts: '*.jar', followSymlinks: false
            }
      }
  }

  stage('Test Stage') {
      steps {
            script{
                def num="http://20.204.151.243:8080/job/Stage2Release/${env.BUILD_NUMBER}/artifact/java-${artifactversion}.jar"
                def abcd = sh(script: "az pipelines variable-group variable update --group-id 1 --name pjar --org https://dev.azure.com/COEDevOpsProject --project stage2devops --value '${num}'", returnStdout:true)
                
                
                sh '''az pipelines release create --organization https://dev.azure.com/COEDevOpsProject --project stage2devops --definition-name Production_Pipeline'''
                sh '''
                az devops configure --defaults organization=https://dev.azure.com/COEDevOpsProject/
                az devops configure --defaults project=stage2devops'''
                
                def abc = sh(script: "az pipelines release list --definition-id 8 |jq '.[].id'", returnStdout:true)
      
                def azz = abc.split('\n')[0]
                echo "hiiiii $azz"
                
                String status = sh(script: "az pipelines release show --id $azz | jq '.environments | .[] |.status' -r", returnStdout:true).trim()
                echo "hiiiii $status"
                
                while(status=="inProgress"){
                    status = sh(script: "az pipelines release show --id $azz | jq '.environments | .[] |.status' -r", returnStdout:true).trim()
                }
                status = sh(script: "az pipelines release show --id $azz | jq '.environments | .[] |.status' -r", returnStdout:true).trim()
                echo "hiiiii $status"
                if(status=="rejected"){
                    error "Pipeline Terminated"
                }
                
                
                
                
               
            }
      }
  }
    
  stage('Upload To Blob') {
      steps {
            script{
                
                azureUpload containerName: 'prodartifact', filesPath: '*.jar', storageCredentialId: 'c6ba666f-a991-4297-8650-c6e52557a6a6', storageType: 'blobstorage'
            }
      }
  }

  }
  
}             